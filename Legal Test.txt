function onEdit(e) {
  // respond to special inputs
  let c = e.range;
  if (c.getBackground() != "#ffffff") { return }

  let cvalue = c.getValue();
  if (cvalue == "EVERY" ||
      cvalue == "PARTY") {

    if (! allBlank(neighboursOf(c))) { c.getSheet().insertRowsAfter(c.getRowIndex(), 5); }
    drawPlusUnderEvery(c);
  }

  if (cvalue == "IF"   ||       // add a checkbox
      cvalue == "WHEN" ||
      cvalue == "OR") {
        c.setHorizontalAlignment("right");
        c.offset(0,1).insertCheckboxes()
                     .setBorder(false,true,false, false, false,false,"grey",SpreadsheetApp.BorderStyle.SOLID_THICK);

        if (c.offset(0,2).isBlank()) { c.offset(0,2).setValue("some condition"); }
        if (e.oldValue == "AND" ||
            e.oldValue == "UNLESS") {
          c.offset(0,1,1,4).setBorder(false,null,false,false,false,false,"white",SpreadsheetApp.BorderStyle.SOLID_THICK);
        }
        c.setBorder(null, null, null, true, false, false,"grey",SpreadsheetApp.BorderStyle.SOLID_THICK);
      }

  if (cvalue == "AND") {       // add a checkbox and a horizontal line
        c.setHorizontalAlignment("right");
        c.offset(0,1).insertCheckboxes()
                     .setBorder(null,true,false, false, false,false,"grey",SpreadsheetApp.BorderStyle.SOLID_THICK);
        if (c.offset(0,2).isBlank()) { c.offset(0,2).setValue("some condition"); }
        c.offset(0,1,1,4).setBorder(true,true,false,false,false,false,"grey",SpreadsheetApp.BorderStyle.SOLID_THICK);
        c.setBorder(null, null, null, true, false, false,"grey",SpreadsheetApp.BorderStyle.SOLID_THICK);
   
  }

  if (cvalue == "HENCE" ||    // draw an L
      cvalue == "LEST") {
        c.setHorizontalAlignment("right");
        c.offset(0,1,1,4).setBorder(false, true,true,false,false,false,"grey",SpreadsheetApp.BorderStyle.SOLID_THICK);
      }

  if (cvalue == "UNLESS") { // draw the borders around the checkbox to carve out
      c.setHorizontalAlignment("right");
      c.offset(0,1)
        .insertCheckboxes()
        .setBorder(true,false,true,true,false,false,"grey",SpreadsheetApp.BorderStyle.SOLID_THICK);
      if (c.offset(0,2).isBlank()) { c.offset(0,2).setValue("some exception"); }
  }
}


// set the cell borders so as to draw horizontal and vertical lines
function drawPlusUnderEvery(c) {
  c.setHorizontalAlignment("right");

  if (c.getValue() == "EVERY") { c.offset(0,1).setValue("Entity"); }
  if (c.getValue() == "PARTY") { c.offset(0,1).setValue("P"); }
  c.offset(1,0).setValue("MUST").setHorizontalAlignment("right");
  c.offset(1,1).setValue("BY").setHorizontalAlignment("right");
  c.offset(1,2).setValue("some deadline");
  c.offset(2,0).setValue("âž”").setHorizontalAlignment("right");
  c.offset(2,1).setValue("take").setHorizontalAlignment("right");
  c.offset(2,2).setValue("some Action");

  c.offset(0,0,3).setBorder( false, false, false, true, false, false, "grey", SpreadsheetApp.BorderStyle.SOLID_THICK);
  c.offset(1,-1,1,7).setBorder(false, false, true, false, false, false, "grey", SpreadsheetApp.BorderStyle.SOLID_THICK);
  c.offset(1,0).setBorder( false, false, true, true, false, false, "grey", SpreadsheetApp.BorderStyle.SOLID_THICK);
 
}


// return the (up to) 8 cells surrounding cell c
function neighboursOf(c) {
  let neighbours = 
    [ c.offset(-1,-1,3)
    , c.offset( 0,-1,1)
    , c.offset( 0, 1,1)
    , c.offset( 1,-1,3)
    ];
  Logger.log("neighbours are:");
  Logger.log(neighbours);
  return neighbours;
}


// are all the cells given, blank?
function allBlank(rs) {
  for (var c of rs) {
    Logger.log("testing " + c)
    if (! c.isBlank()) { Logger.log("allBlank: returning false");
                        return false; }
  }
  Logger.log("allBlank: returning true");
  return true;
}

